---
title: "Graphs"
format:
   html:
    toc: true
    toc-depth: 2
    number-sections: true
    code-block-bg: true
    code-block-border-left: true
---

We've seen multiple ways of storing, representing and manipulating data during this class. The last one we are going to look at is graphs which have multiple applications in computer science.

# Introduction
The field of graph theory can be traced to a problem that was posed in 1736 in the town that was called Konigsberg. The town had a river flowing around two islands in such a way as to produce four different areas of land. Those four pieces of land were connected by 7 bridges as shown in the figure below.

![](images\10 (1).JPG){ width=500px }

The konigsberg problem is: Starting at one land area, is it possible to walk across all the bridges exactly once and return to the starting land area?

## Terminology
A graph is made up of vertices and edges (where vertices are analogous to nodes in a tree), and each edge is bounded by two vertices. The vertices represent some information, and the edges represent some form of relationship between the vertices. Two nodes are said to be adjacent if they are connected byan edge. The vertices adjacent to a given vertex are said to be that's vertex's neighbors. A path between any two vertices is a sequence of edges that lead 
from the first vertex to the second. A graph is called connected if there is at leastone path from every vertex to every other vertex. In contrast, a non-connected graph could consist of several connected components.

![](images\10 (1).png){ width=500px }

A graph can be **directed** or **undirected** with the distinction being whether the edges have a direction associated with them or not. In some situations, we'd like to have some form of **weight** associated with the edges. In those cases, the graph is referred to as a **weighted graph**. The weight of the edge could represent physical distance or time cost between the two vertices.

![](images\10 (2).png){ width=500px }

The figure above shows a connected and non-connected graph side by side.

# Graph representation
There are two main ways that graphs are stored and represented in computer memory.

## Adjacency matrix
For a graph of n vertices, an adjacency matrix is an n x n matrix filled with 0's and 1's. A 1 at row 4 and column 5 means that there is an edge between the fourth and fifth vertex, while a 0 means that those two vertices are not directly connected. For example the graph at the top of this page can be represented by the adjacency matrix below.

![](images\10 (3).png){ width=500px }


::: {.callout}
See if you can come up with the adjacency matrices for the two other
graphs on the previous page.
:::

An adjacency matrix doesn't have to be just 1's and 0's. With the weighted graph, the numbers could represent the associated weight of that edge e.g. the cost of traveling directly from one vertex to another.

## Adjacency list
The adjacency list is another way of representing a graph in memory. Each vertex is represented by its own linked list which consists of vertices that it is connected to. We can store the heads of those n linked lists in an array of size n.

![](images\10 (1).svg){ width=500px }

The figure above shows the adjacency list representation of the first graph we looked at.

::: {.callout}
See if you can come up with the adjacency lists for the two other 
graphs on page 2.
:::

# Graph Traversals
Traversing a graph is one of its fundamental operations. We need to know how to traverse a graph in order to do some form of manipulation in its vertices. Its similar to the way we traversed trees (using inorder, preorder, and postorder) a while back. However, with graphs its a bit more complicated because there are potentially multiple paths to a given vertex and we want to avoid cycles. Additionally, if the graph is not connected, it will be impossible to traverse to every vertex from a given single vertex.

There are two approaches to traversing a graph.

## Depth-first traversal
The idea behind depth-first is to travel as far away from the source vertex as quickly as possible and only back up when you reach a dead end. Interestingly, this approach can be implemented using a stack. We store the possible vertices tobe visited on a stack, and we put the visited vertices in a queue so that we know the exact order in which we visited them.
```{.default}
Depth-first Traversal:
    push source vertex onto stack
    while stack is not empty:
        v = stack.pop()
        if v hasn't been visited yet:
            visit v
            push all adjacent nodes onto stack (in reverse 
            lexicographical order)
```

The depth-first search can also be implemented using a recursive function.
```{.default}
Depth-first Traversal:
    for each vertex, v, in the graph
        if v is not visited
            visit v.
            start Depth-first Traversal at v.
```    

In general, depth-first is just go as deep as you can, then back up when you get to an already visited node or a dead end.

For example, the order of visitation for the graph below would be 
$$1, 2, 6, 8, 3, 4, 7, 9, 5.$$

![](images\10 (2).svg){ width=500px }


::: {.callout}
See if you can come up with the order of visitation of the graph 
below with a depth-first search.

![](images\10 (3).svg){ width=500px }

|                   0, 1, 4, 3, 2, 5, 7, 8, 6, 9.
:::

## Breadth-first traversal
The second alternative to traversing a graph is to visit all adjacent vertices first before going any deeper. In this approach, we want to stay as close as possible to the starting point. This traversal algorithm can be implemented using a queue.
```{.default}
Breadth-first Traversal:
    create queue Q
    enqueue source vertex
    while Q is not empty:
        v = Q.dequeue();
        visit v.
        enqueue all adjacent vertices that haven't been visited yet
```
Given the algorithm above, the traversal for the graph below

![](images\10 (2).svg){ width=500px }


is

|                          1, 2, 3, 4, 5, 6, 7, 8, 9

::: {.callout}
See if you can come up with the order of visitation of the graph 
below with a breadth-first search.


![](images\10 (3).svg){ width=500px }


|                         0, 1, 3, 4, 2, 5, 7, 8, 6, 9
:::

# Minimum Spanning Tree (MST)
The last operation we shall discuss about graphs is minimum spanning trees. By now you must have noticed the similarities between graphs and trees. A spanning tree is a graph in which all the edges that would make a cycle are removed, and all nodes in the original graph can still be accessed from the root.

There are multiple spanning trees that can be gotten from a given graph, but we are only really interested in the minimum spanning tree, which is the spanning tree with the lowest cost. With an unweighted graph, this just means the tree with the minimum number of edges required to visit all nodes in the graph.

More commonly, however, this is applied to weighted graphs, in which case the edge weights are a representative of the cost of that edge, and a minimum spanning tree should have the lowest weight and yet still connect all edges.

Starting at the source vertex, we visit it and then identify the edge with the lowestweight connected to a node that we've already visited. We add this edge to the MST and progress until we have visited all nodes.

![](images\10 (4).png){ width=500px }

Remember we always add the edge, connected to what we have already 
identified, that the lowest weight.

::: {.callout}
See if you can get the minimum spanning tree for the graph below.

![](images\10 (4).svg){ width=200px }
![](images\10 (5).svg){ width=200px }
:::
